@app.get("/")
def root():
    return {"Hello World"}

@app.post("/convert")
async def convert_xls(file: UploadFile = File(...), mapping: str = Form(...)):
    try:
        mapping = json.loads(mapping) 
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xls") as tmp:
            contents = await file.read()
            tmp.write(contents)
            tmp_path = Path(tmp.name)

        account_number = mapping.get("Account ID *")
        currency = mapping.get("Account Currency *")
        balance = mapping.get("Opening balance amount *") 
        statement_id = mapping.get("Statement ID *") 

        df = pd.read_html(tmp_path, skiprows=11)[0]
        df.columns = ["Transaction Date", "Reference", "Debit Amount", "Credit Amount", "Description"]

        df["Transaction Date"] = pd.to_datetime(df["Transaction Date"], errors="coerce", dayfirst=True)
        df = df[pd.notna(df["Transaction Date"])].copy()

        df["Debit Amount"] = pd.to_numeric(df["Debit Amount"].astype(str).str.replace(",", ""), errors="coerce").fillna(0)
        df["Credit Amount"] = pd.to_numeric(df["Credit Amount"].astype(str).str.replace(",", ""), errors="coerce").fillna(0)

        df["DateOnly"] = df["Transaction Date"].dt.date
        grouped = df.groupby("DateOnly", sort=True)

        output_lines = []
        opening_balance = float(str(balance).replace(",", "").replace(".00", ""))

        def fmt_amount(x):
            return f"{int(x)}" if float(x).is_integer() else f"{x:.2f}"

        for day, group in grouped:
            total_debit = group["Debit Amount"].sum()
            total_credit = group["Credit Amount"].sum()
            closing_balance = opening_balance + total_credit - total_debit

            opening_direction = "D" if opening_balance < 0 else "C"
            closing_direction = "D" if closing_balance < 0 else "C"

            opening_balance_str = fmt_amount(abs(opening_balance))
            closing_balance_str = fmt_amount(abs(closing_balance))
            date_str = pd.to_datetime(day).strftime("%Y%m%d")

            header_line = (
                f"1;{account_number};{date_str};{opening_direction};{opening_balance_str};"
                f"{date_str};{closing_direction};{closing_balance_str};{currency};{statement_id};"
            )
            output_lines.append(header_line)

            # Transaction lines
            for _, row in group.iterrows():
                transaction_date = row["Transaction Date"].strftime("%Y%m%d")

                amount = ""
                direction = ""
                if row["Debit Amount"] != 0:
                    direction = "D"
                    amount = fmt_amount(abs(row["Debit Amount"]))
                elif row["Credit Amount"] != 0:
                    direction = "C"
                    amount = fmt_amount(abs(row["Credit Amount"]))

                description = str(row["Description"]).strip() if pd.notna(row["Description"]) else ""
                reference = str(row["Reference"]).strip() if pd.notna(row["Reference"]) else ""
                description = description.replace(";", ".")

                line = (
                    f"2;NTRF;;"
                    f"{transaction_date};{transaction_date};{direction};{amount};{currency};"
                    f"{description};{reference};;;"
                )
                output_lines.append(line)

            opening_balance = closing_balance

        with tempfile.NamedTemporaryFile(delete=False, suffix=".txt", mode="w", encoding="utf-8") as out:
            out.write("\n".join(output_lines))
            txt_path = Path(out.name)

        return FileResponse(
            txt_path,
            media_type="text/plain",
            filename="converted_output.txt"
        )

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    